var seft
function uuidverify(_this){
    seft = _this
    getCookies('useruuid',(data)=>{
        var useruuid = data.value
        if(_this.$route.path != '/user' && _this.$route.path != '/user/reg'){
            if(!useruuid){
                loginwin()
                _this.$router.push({ path: '/user'})
            }
        }
    })
}
var ipc,session
var post = "8082"
// if(document.location.port === post){
ipc = require('electron').ipcRenderer;
session = require('electron').remote.session

// }
function userwin(){
    if(ipc){
        ipc.send('user-window')
        seft.$router.push({ path: '/'})
    }else{
        seft.$router.push({ path: '/'})
    }
}
function loginwin(){
    if(ipc){
        ipc.send('login-window')
        seft.$router.push({ path: '/user'})
    }else{
        seft.$router.push({ path: '/user'})
    }
}
function minwin(){
    if(ipc){
        ipc.send('window-min')
    }
}
function hidewin(){
    if(ipc){
        ipc.send('window-hide')
    }
}
function vippay(){
    if(ipc){
        ipc.send('href-vip')
    }else{
        window.open('http://idcyw.cn/home/vip')
    }
}
function uppassword(){
    if(ipc){
        ipc.send('up-password')
    }else{
        window.open('http://idcyw.cn/home/index')
    }
}

function setCookies(name,value){
    if(session){
        const cookie = {
            url: "http://localhost:8080",
            name: name,
            value: value,
          };
        session.defaultSession.cookies.set(cookie, (error) => {
            if (error) console.error(error)
        })
    }else{
        seft.$cookies.set(name, value)
    }
   
}
function getCookies(name,fun){
    if(session){
        session.defaultSession.cookies.get({url: "http://localhost:8080",name:name}, (error, cookies) => {
            if(cookies[0]){
                fun(cookies[0])
            }else{
                fun({value:""})
            }
        })
    }else{
        fun({value:seft.$cookies.get(name)})
    }
}

function removeCookies(name){
    if(session){
        const cookie = {
            url: "http://localhost:8080",
            name: name,
            value: "",
          };
        session.defaultSession.cookies.set(cookie, (error) => {
            if (error) console.error(error)
        })
    }else{
        seft.$cookies.set(name, '')
    }
}
// 获取 已登录用户
var getcookiesnamearr = []
function getcookiesname(_this){
    if(session){
        session.defaultSession.cookies.get({url: "http://localhost:8080",name:"loginuser"}, (error, cookies) => {
            if(cookies[0].value){
                getcookiesnamearr = cookies[0].value.split(",")
            }
            _this.$store.state.example.userdata = Array.from(new Set(getcookiesnamearr))
        })
    }else{
        _this.$cookies.get(name)
        // seft.$cookies.set(name, value)
    }
}
// 存储 用户
function storagename(name){
    if(session){
        var newgetnamearr = Array.from(new Set(getcookiesnamearr))
            var jsonarr = newgetnamearr.join(",")
            if(jsonarr){
                var valuestr = jsonarr+","+name
            }else{
                var valuestr = name
            }
        const cookie = {
            url: "http://localhost:8080",
            name: "loginuser",
            value: valuestr,
          };
        session.defaultSession.cookies.set(cookie, (error) => {
            if (error) console.error(error)
        })
    }else{
        seft.$cookies.get(name)
        // seft.$cookies.set(name, value)
    }
       
        
}

// 时间兑换
function timestampToTime(timestamp) {
    var date = new Date(timestamp * 1000);//时间戳为10位需*1000，时间戳为13位的话不需乘1000
    var Y = date.getFullYear() + '-';
    var M = (date.getMonth()+1 < 10 ? '0'+(date.getMonth()+1) : date.getMonth()+1) + '-';
    var D = date.getDate() + ' ';
    var h = date.getHours() + ':';
    var m = date.getMinutes() + ':';
    var s = date.getSeconds();
    return Y+M+D+h+m+s;
}
function formatstoragenet(data){
    var size = ""
        if( data < 1024 ){ //如果小于1KB转化成B  
                size = parseInt(data) + " B";    
        }else if(data < 1024 * 1024 ){//如果小于1MB转化成KB  
                size = parseInt(data / 1024) + " KB";              
        }else if(data < 1024 * 1024 * 1024){ //如果小于1GB转化成MB  
                size = parseInt(data / (1024 * 1024 )) + " MB";  
        }else if(data < 1024 * 1024 * 1024 * 1024){ //如果小于1TB转化成GB 
                size = parseInt(data / (1024 * 1024 * 1024)) + " GB";  
        }else{//其他转化成TB
                size = parseInt(data / (1024 * 1024 * 1024 *1024)) + " TB";
        }
    return size
}
export {
    uuidverify,userwin,
    loginwin,hidewin,
    minwin,vippay,
    uppassword,
    timestampToTime,
    formatstoragenet,setCookies,getCookies,removeCookies,
    storagename,getcookiesname
}